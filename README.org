#+title: step-by-step-solver: practical algorithms
#+options: toc:nil

* Overview

This program aims at helping students to understand how algorithms
works. It also can help the teacher to explain some algorithms, since
it tries to mimic what can be done on a blackboard. The user is
proposed a problem from a set of problems, and it has to solve it
*using only some predefined functions*. The user selects one function
from the interface and some objects : the program then applies the
function to its selected arguments and waits for another
operation. When the solution of the problem has been built, the user has to
submit their solution. The program verifies whether it's correct.

By doing so, students may visualize step by step executions of
algorithms on actual data. By trials and errors, they may get a clear understanding
of the order in which operations have to be performed. This program can
also help students to write python programs by displaying at every
step the syntactically correct python expression corresponding to
their actions. It also accustoms students to use ~return~ statements when
they write functions, because they have to "submit" (e.g. return) a
solution to the program.

The project has been inspired by [[https://www.advanced-ict.info/interactive/insertion_sort.html][Insertion Sort Game]], where the user
has to sort an array using only two buttons ~Left~, and ~Stick~. The
problem ~tri_insertion_iter~ tries to mimic this behavior and show how
the teacher can use its owns data structures to virtually implement
any problem. The interface is inspired by the proof assistant program
Coq, where the current set of hypothesis on which to
operate at any given time is shown to the user.

This program also helps to explain how to solve problems using
recursion, as it is explained in [[Usable interface][the recursion case]].

* Defining a problem

Every problem should be defined in the folder ~./problèmes/~ or one of their
subfolder. The problem is automatically available if any variable of
type ~Problème~ is defined in the file. For instance, let's explain how
to implement the problem of finding the minimum in a list ~l~, using
recursion :
- if the list ~l~ is of length 1 : return that element ;
- in the general case :
  - compute ~m~, the minimum of ~tail(l)~
  - compare ~m~ with ~head(l)~ :
    - if ~m < head(l)~, then the minimum of the list is ~m~
    - else the minimum of ~l~ is ~head(l)~.

At the begining of a ~minimum.py~ file, write :

#+BEGIN_SRC jupyter-python :session py
from problem_solver import Problème
from data_structures import Liste, Entier
#+END_SRC

#+RESULTS:

** Generating examples

When defining a new problem, one has to define a function generating
suitable input data for the problem. The same function is called each
time the problem is selected by the user. It is especially usefull when
various cases can arise, as it is the case for minimum finding : in
the general case, the minimum can be the head of the list or else
belongs to the tail of the list. 

Generating functions can be found in the ~generate.py~ file. 

** Defining the solution

In order to verify student's answers, one has to provide a way of
computing the solution of the given problem for any input. It can be
done in various ways, either "manually" or using predefined python
functions. For instance it's possible to simply return ~min(l)~, when ~l~
is of type ~Liste~. One can also give the "complete" recursive
implementation using the interface of type ~Liste~ :

#+BEGIN_SRC jupyter-python :session py
@Problème.recursive(len)
def minimum(l):
    """ Liste -> Entier
    Détermine le minimum de la liste l. """
    if l.est_singleton():
        return l.tete()
    else:
        m = minimum(l.queue())
        if m < l.tete():
            return m
        else:
            return l.tete()
#+END_SRC

#+RESULTS:

If the decorator ~@Problème.recursive~ is used, it as to be given a function
having the same arguments than the function it is applied to. 
It outputs an int representing the data "complexity". When this decorator is used and the function is
used as the solution function for a problem, the user can apply it only to
data with lower "complexity" than the current problem's difficulty.

If type indications are given in the docstring or by using type hints, type
checking is performed on function call.

** Exporting the problem 
*** Defining a ~Problem~ variable 

The ~Problem~ class has various attributes :

|----------------+--------------------------------------------------------------------------------------------|
| Attribute      | Description                                                                                |
|----------------+--------------------------------------------------------------------------------------------|
| ~name~           | A string describing the problem name                                                       |
| ~generating_fun~ | A function to use in order to generate problem entries                                     |
| ~problem_funs~   | A list of functions available to the user in order to solve the problem.              |
| ~solution_fun~   | A function (~@Problème.recursive~ has to be used if recursive).
|----------------+--------------------------------------------------------------------------------------------|
  
*** Using other problems

It is possible to use already defined functions. For example, if
trying to implement the selection sort algorithm, one can first import
the function ~minimum~ and make it usable by setting ~problem_funs~ to
~[minimum]~. It is also possible to add class methods like ~Liste.divise~.

** Custom data structures

In addition to the already defined data structures, one can add its
own data structures when creating new problems. They have to inherit from
~BaseObject~ class, defined in the ~data_structures.py~ file. Objects
(or list of objects) returned by methods will automatically be added
to the list of objects the user can operate on. 

For an example of the implementation of [[https://www.advanced-ict.info/interactive/insertion_sort.html][Insertion Sort Game]] with our
program, see ~tri_insertion_iter.py~. Other examples can be found in
~minimum_iter.py~ (a ~TableauCaché~ object diplays its content only it has
already been visited once).

* Implemented data structures
** Entiers

Integers, with names.

** Listes

|--------------+------------------------------------------------------|
| Method       | Description                                          |
|--------------+------------------------------------------------------|
| ~l.est_vide()~ | Returns ~True~ if and only if the list is empty        |
| ~l.tete()~     | Returns the head of the list ~l~                       |
| ~l.queue()~    | Returns the tail of the list ~l~                       |
| ~l.divise()~   | Returns ~(l.tete(), l.queue())~                        |
| ~l.ajoute(a)~  | Returns the list where element ~a~ has been added to ~l~ |
|--------------+------------------------------------------------------|

** TODO Trees
